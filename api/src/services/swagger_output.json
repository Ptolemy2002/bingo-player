{
  "openapi": "3.1.1",
  "info": {
    "version": "1.0.0",
    "title": "Bingo Player API",
    "description": "Documentation of the Bingo Player API"
  },
  "servers": [
    {
      "url": "http://localhost:8080/"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "General"
        ],
        "description": "  Root route of the API. For API documentation, go to /api/v1/docs.  ",
        "responses": {
          "200": {
            "description": "Root route.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Root route. For docs, go <a href='/api/v1/docs'>here</a>.",
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                  "example": "Root route. For docs, go <a href='/api/v1/docs'>here</a>.",
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "tags": [
          "General"
        ],
        "description": "  Ping the server to ensure the API is up and running.  It should respond with a 200 response and the text \"pong\".  ",
        "responses": {
          "200": {
            "description": "Server is up and running.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "pong",
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                  "example": "pong",
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/spaces/get/all": {
      "get": {
        "tags": [
          "Spaces",
          "Get"
        ],
        "description": "Get all spaces in the database.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/l"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/o"
          },
          {
            "$ref": "#/components/parameters/sortBy"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sortOrder"
          },
          {
            "$ref": "#/components/parameters/so"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSpaces200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GetSpaces200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "No matching spaces found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/spaces/get/by-id/{id}": {
      "get": {
        "tags": [
          "Spaces",
          "Get"
        ],
        "description": "Get the space with the exact given ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the space to get."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSpaceByExactID200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GetSpaceByExactID200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "No matching spaces found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/spaces/count/all": {
      "get": {
        "tags": [
          "Spaces",
          "Count"
        ],
        "description": "Get the number of spaces in the database.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountSpaces200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CountSpaces200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "No matching spaces found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/spaces/get/all/list/{prop}": {
      "get": {
        "tags": [
          "Spaces",
          "List"
        ],
        "description": "  Get all values for a given space query prop.  The values are returned as an array of strings, but may contain null values.  ",
        "parameters": [
          {
            "name": "prop",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpaceQueryProp"
            },
            "description": "The space query prop to list.",
            "type": "string"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/o"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/l"
          },
          {
            "$ref": "#/components/parameters/sortOrder"
          },
          {
            "$ref": "#/components/parameters/so"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSpaceProp200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ListSpaceProp200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "No matching spaces found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/spaces/get/by-prop/{prop}/{query}": {
      "get": {
        "tags": [
          "Spaces",
          "Get",
          "Query"
        ],
        "description": "  Get spaces by a given space query prop.  The spaces are returned as an array of CleanMongoSpace objects.  ",
        "parameters": [
          {
            "name": "prop",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpaceQueryPropNonId"
            },
            "description": "The space query prop to search.",
            "type": "string"
          },
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The query string to search for."
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/o"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/l"
          },
          {
            "$ref": "#/components/parameters/caseSensitive"
          },
          {
            "$ref": "#/components/parameters/cs"
          },
          {
            "$ref": "#/components/parameters/accentSensitive"
          },
          {
            "$ref": "#/components/parameters/as"
          },
          {
            "$ref": "#/components/parameters/matchWhole"
          },
          {
            "$ref": "#/components/parameters/mw"
          },
          {
            "$ref": "#/components/parameters/sortBy"
          },
          {
            "$ref": "#/components/parameters/sb"
          },
          {
            "$ref": "#/components/parameters/sortOrder"
          },
          {
            "$ref": "#/components/parameters/so"
          },
          {
            "$ref": "#/components/parameters/invert"
          },
          {
            "$ref": "#/components/parameters/i"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSpacesByProp200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GetSpacesByProp200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "No matching spaces found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/spaces/count/by-prop/{prop}/{query}": {
      "get": {
        "tags": [
          "Spaces",
          "Count",
          "Query"
        ],
        "description": "Get the number of spaces in the database matching the given query.",
        "parameters": [
          {
            "name": "prop",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpaceQueryPropNonId"
            },
            "description": "The space query prop to search.",
            "type": "string"
          },
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The query string to search for."
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/o"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/l"
          },
          {
            "$ref": "#/components/parameters/caseSensitive"
          },
          {
            "$ref": "#/components/parameters/cs"
          },
          {
            "$ref": "#/components/parameters/accentSensitive"
          },
          {
            "$ref": "#/components/parameters/as"
          },
          {
            "$ref": "#/components/parameters/matchWhole"
          },
          {
            "$ref": "#/components/parameters/mw"
          },
          {
            "$ref": "#/components/parameters/invert"
          },
          {
            "$ref": "#/components/parameters/i"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountSpacesByProp200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CountSpacesByProp200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "No matching spaces found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/spaces/get/by-prop/{queryProp}/{query}/list/{listProp}": {
      "get": {
        "tags": [
          "Spaces",
          "List",
          "Query"
        ],
        "description": "  Get all values for a given space query prop that appear in the spaces that match the given query.  The values are returned as an array of strings, but may contain null values.  ",
        "parameters": [
          {
            "name": "queryProp",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpaceQueryPropNonId"
            },
            "description": "The space query prop to search.",
            "type": "string"
          },
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The query string to search for."
          },
          {
            "name": "listProp",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpaceQueryProp"
            },
            "description": "The space query prop to list.",
            "type": "string"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/o"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/l"
          },
          {
            "$ref": "#/components/parameters/caseSensitive"
          },
          {
            "$ref": "#/components/parameters/cs"
          },
          {
            "$ref": "#/components/parameters/accentSensitive"
          },
          {
            "$ref": "#/components/parameters/as"
          },
          {
            "$ref": "#/components/parameters/matchWhole"
          },
          {
            "$ref": "#/components/parameters/mw"
          },
          {
            "$ref": "#/components/parameters/sortOrder"
          },
          {
            "$ref": "#/components/parameters/so"
          },
          {
            "$ref": "#/components/parameters/invert"
          },
          {
            "$ref": "#/components/parameters/i"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSpacePropByProp200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ListSpacePropByProp200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "No matching spaces found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/spaces/search/{query}": {
      "get": {
        "tags": [
          "Spaces",
          "Get",
          "Search"
        ],
        "description": "Use the Atlas Search index to search for spaces based on the provided query string.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The search query."
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/l"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/o"
          },
          {
            "$ref": "#/components/parameters/sortByWithScore"
          },
          {
            "$ref": "#/components/parameters/sbWithScore"
          },
          {
            "$ref": "#/components/parameters/sortOrderDescDefault"
          },
          {
            "$ref": "#/components/parameters/soDescDefault"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSpaces200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSpaces200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "No matching spaces found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/spaces/search/{query}/count": {
      "get": {
        "tags": [
          "Spaces",
          "Count",
          "Search"
        ],
        "description": "Use the Atlas Search index to search for spaces based on the provided query string. and return the count of the results.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The search query."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSpacesCount200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSpacesCount200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "No matching spaces found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/spaces/search/{query}/list/{prop}": {
      "get": {
        "tags": [
          "Spaces",
          "List",
          "Search"
        ],
        "description": "  Use the Atlas Search index to get all values for a given space query prop that appear in the spaces that match  the given query. The values are returned as an array of objects, each containing a value and a relevance score  for the document containing that value with the highest relevance. The value is a string, but may be null.  ",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The search query."
          },
          {
            "name": "prop",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SpaceQueryProp"
            },
            "description": "The space query prop to list.",
            "type": "string"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/l"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/o"
          },
          {
            "$ref": "#/components/parameters/sortOrderDescDefault"
          },
          {
            "$ref": "#/components/parameters/soDescDefault"
          },
          {
            "$ref": "#/components/parameters/sortBySearchListProp"
          },
          {
            "$ref": "#/components/parameters/sbSearchListProp"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSpacesListProp200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSpacesListProp200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "No matching spaces found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/spaces/new": {
      "post": {
        "tags": [
          "Spaces",
          "New"
        ],
        "description": "Create a new space in the database.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewSpace200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/NewSpace200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "No matching spaces found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewSpaceRequestBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewSpaceRequestBody"
              }
            }
          }
        }
      }
    },
    "/api/v1/spaces/update/by-id/{id}": {
      "post": {
        "tags": [
          "Spaces",
          "Update"
        ],
        "description": "Update an existing space in the database.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the space to update."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSpaceByID200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSpaceByID200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "No matching spaces found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSpaceByIDRequestBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSpaceByIDRequestBody"
              }
            }
          }
        }
      }
    },
    "/api/v1/spaces/update/by-name/{name}": {
      "post": {
        "tags": [
          "Spaces",
          "Update"
        ],
        "description": "Update an existing space in the database.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the space to update."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSpaceByName200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSpaceByName200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "No matching spaces found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSpaceByNameRequestBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSpaceByNameRequestBody"
              }
            }
          }
        }
      }
    },
    "/api/v1/spaces/delete/by-id/{id}": {
      "delete": {
        "tags": [
          "Spaces",
          "Delete"
        ],
        "description": "Delete a space by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the space to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteSpaceByID200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteSpaceByID200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "No matching spaces found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/spaces/delete/by-name/{name}": {
      "delete": {
        "tags": [
          "Spaces",
          "Delete"
        ],
        "description": "Delete a space by name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the space to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteSpaceByName200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteSpaceByName200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "No matching spaces found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/spaces/duplicate/by-id/{id}": {
      "post": {
        "tags": [
          "Spaces",
          "Duplicate"
        ],
        "description": "Duplicate an existing space in the database.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the space to duplicate."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicateSpaceByID200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicateSpaceByID200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "No matching spaces found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/spaces/duplicate/by-name/{name}": {
      "post": {
        "tags": [
          "Spaces",
          "Duplicate"
        ],
        "description": "Duplicate an existing space in the database.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the space to duplicate."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicateSpaceByName200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicateSpaceByName200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "No matching spaces found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "limit": {
        "schema": {
          "$ref": "#/components/schemas/limit"
        },
        "required": false,
        "description": "[Query Parameter] The maximum number of resources to return. Must be a positive integer and non-zero. If not provided, the server will return all found resources.",
        "name": "limit",
        "in": "query"
      },
      "l": {
        "schema": {
          "$ref": "#/components/schemas/l"
        },
        "required": false,
        "description": "[Query Parameter] Shorthand for limit.",
        "name": "l",
        "in": "query"
      },
      "offset": {
        "schema": {
          "$ref": "#/components/schemas/offset"
        },
        "required": false,
        "description": "[Query Parameter] The number of spaces to skip before returning results. Must be a non-negative integer. If not provided, it will be considered 0.",
        "name": "offset",
        "in": "query"
      },
      "o": {
        "schema": {
          "$ref": "#/components/schemas/o"
        },
        "required": false,
        "description": "[Query Parameter] Shorthand for offset.",
        "name": "o",
        "in": "query"
      },
      "caseSensitive": {
        "schema": {
          "$ref": "#/components/schemas/caseSensitive"
        },
        "required": false,
        "description": "[Query Parameter] Whether to match the query case-sensitively. False if not provided.",
        "name": "caseSensitive",
        "in": "query"
      },
      "cs": {
        "schema": {
          "$ref": "#/components/schemas/cs"
        },
        "required": false,
        "description": "[Query Parameter] Shorthand for caseSensitive.",
        "name": "cs",
        "in": "query"
      },
      "accentSensitive": {
        "schema": {
          "$ref": "#/components/schemas/accentSensitive"
        },
        "required": false,
        "description": "[Query Parameter] Whether to match the query accent-sensitively. False if not provided.",
        "name": "accentSensitive",
        "in": "query"
      },
      "as": {
        "schema": {
          "$ref": "#/components/schemas/as"
        },
        "required": false,
        "description": "[Query Parameter] Shorthand for accentSensitive.",
        "name": "as",
        "in": "query"
      },
      "matchWhole": {
        "schema": {
          "$ref": "#/components/schemas/matchWhole"
        },
        "required": false,
        "description": "[Query Parameter] Whether to match the query as the whole string. False if not provided.",
        "name": "matchWhole",
        "in": "query"
      },
      "mw": {
        "schema": {
          "$ref": "#/components/schemas/mw"
        },
        "required": false,
        "description": "[Query Parameter] Shorthand for matchWhole.",
        "name": "mw",
        "in": "query"
      },
      "sortOrder": {
        "schema": {
          "$ref": "#/components/schemas/sortOrder"
        },
        "required": false,
        "description": "[Query Parameter] The order to sort the field by. Ascending if not provided.",
        "name": "sortOrder",
        "in": "query"
      },
      "so": {
        "schema": {
          "$ref": "#/components/schemas/so"
        },
        "required": false,
        "description": "[Query Parameter] Shorthand for sortOrder.",
        "name": "so",
        "in": "query"
      },
      "sortOrderDescDefault": {
        "schema": {
          "$ref": "#/components/schemas/sortOrderDescDefault"
        },
        "required": false,
        "description": "[Query Parameter] The order to sort the field by. Descending by default.",
        "name": "sortOrder",
        "in": "query"
      },
      "soDescDefault": {
        "schema": {
          "$ref": "#/components/schemas/soDescDefault"
        },
        "required": false,
        "description": "[Query Parameter] Shorthand for sortOrder.",
        "name": "so",
        "in": "query"
      },
      "sortBy": {
        "schema": {
          "$ref": "#/components/schemas/sortBy"
        },
        "required": false,
        "description": "[Query Parameter] The field to sort by. 'id' if not provided.",
        "name": "sortBy",
        "in": "query"
      },
      "sb": {
        "schema": {
          "$ref": "#/components/schemas/sb"
        },
        "required": false,
        "description": "[Query Parameter] Shorthand for sortBy.",
        "name": "sb",
        "in": "query"
      },
      "sortByWithScore": {
        "schema": {
          "$ref": "#/components/schemas/sortByWithScore"
        },
        "required": false,
        "description": "[Query Parameter] The field to sort by. 'id' if not provided.",
        "name": "sortBy",
        "in": "query"
      },
      "sbWithScore": {
        "schema": {
          "$ref": "#/components/schemas/sbWithScore"
        },
        "required": false,
        "description": "[Query Parameter] Shorthand for sortBy.",
        "name": "sb",
        "in": "query"
      },
      "sortBySearchListProp": {
        "schema": {
          "allOf": [
            {
              "$ref": "#/components/schemas/sortBySearchListProp"
            },
            {
              "default": "_score"
            }
          ]
        },
        "required": false,
        "description": "The field to sort by.",
        "name": "sortBy",
        "in": "query"
      },
      "sbSearchListProp": {
        "schema": {
          "$ref": "#/components/schemas/sbSearchListProp"
        },
        "required": false,
        "description": "[Query Parameter] Shorthand for searchListPropSortBy.",
        "name": "sb",
        "in": "query"
      },
      "invert": {
        "schema": {
          "$ref": "#/components/schemas/invert"
        },
        "required": false,
        "description": "[Query Parameter] Whether to invert the match. False if not provided.",
        "name": "invert",
        "in": "query"
      },
      "i": {
        "schema": {
          "$ref": "#/components/schemas/i"
        },
        "required": false,
        "description": "[Query Parameter] Shorthand for invert.",
        "name": "i",
        "in": "query"
      }
    },
    "schemas": {
      "SpaceID": {
        "type": "string",
        "description": "The ID of a space.",
        "example": "abc123"
      },
      "SpaceName": {
        "type": "string",
        "minLength": 1,
        "description": "The name of a space.",
        "example": "My Space"
      },
      "SpaceDescription": {
        "type": [
          "string",
          "null"
        ],
        "description": "A description of a space.",
        "example": "This is a space for a Bingo Board."
      },
      "SpaceExample": {
        "type": "string",
        "minLength": 1,
        "description": "An example of what could be considered applicable to a space.",
        "example": "Example 1"
      },
      "SpaceTag": {
        "type": "string",
        "pattern": "^(in\\:)?[a-zA-Z0-9-][a-zA-Z0-9_-]+$",
        "description": "A tag for a space.",
        "example": "tag-1 or in:collection-1"
      },
      "CleanSpace": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SpaceID"
          },
          "name": {
            "$ref": "#/components/schemas/SpaceName"
          },
          "description": {
            "$ref": "#/components/schemas/SpaceDescription"
          },
          "examples": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpaceExample"
            },
            "description": "Examples for what could be considered applicable to the space. NOTE: Internally, this is a set, but it is represented as an array here for compatibility reasons."
          },
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpaceName"
            },
            "description": "Aliases for the space. NOTE: Internally, this is a set, but it is represented as an array here for compatibility reasons."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpaceTag"
            },
            "description": "Tags for the space. NOTE: Internally, this is a set, but it is represented as an array here for compatibility reasons."
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "examples",
          "aliases",
          "tags"
        ],
        "description": "A space for a Bingo Board."
      },
      "Space": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SpaceID"
          },
          "name": {
            "$ref": "#/components/schemas/SpaceName"
          },
          "description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SpaceDescription"
              },
              {
                "default": null
              }
            ]
          },
          "examples": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpaceExample"
            },
            "description": "Examples for what could be considered applicable to the space. NOTE: Internally, this is a set, but it is represented as an array here for compatibility reasons."
          },
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpaceName"
            },
            "description": "Aliases for the space. NOTE: Internally, this is a set, but it is represented as an array here for compatibility reasons."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpaceTag"
            },
            "description": "Tags for the space. NOTE: Internally, this is a set, but it is represented as an array here for compatibility reasons."
          }
        },
        "required": [
          "id",
          "name"
        ],
        "description": "CleanSpace, but with some fields optional and provided sensible defaults."
      },
      "CleanMongoSpace": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/SpaceName"
          },
          "description": {
            "$ref": "#/components/schemas/SpaceDescription"
          },
          "examples": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpaceExample"
            }
          },
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpaceName"
            },
            "description": "Aliases for the space.",
            "example": [
              "Alias 1",
              "Alias 2"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpaceTag"
            }
          },
          "_id": {
            "$ref": "#/components/schemas/SpaceID"
          }
        },
        "required": [
          "name",
          "description",
          "examples",
          "aliases",
          "tags",
          "_id"
        ],
        "description": "The MongoDB representation of a Space."
      },
      "MongoSpace": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/SpaceName"
          },
          "description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SpaceDescription"
              },
              {
                "default": null
              }
            ]
          },
          "examples": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpaceExample"
            },
            "default": []
          },
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpaceName"
            },
            "default": [],
            "description": "Aliases for the space.",
            "example": [
              "Alias 1",
              "Alias 2"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpaceTag"
            },
            "default": []
          },
          "_id": {
            "$ref": "#/components/schemas/SpaceID"
          }
        },
        "required": [
          "name",
          "_id"
        ],
        "description": "CleanMongoSpace, but with some fields optional and provided sensible defaults."
      },
      "SpaceQueryProp": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "description",
          "examples",
          "aliases",
          "tags",
          "_id",
          "known-as",
          "alias",
          "tag",
          "example"
        ],
        "description": "A property of a space that can be queried."
      },
      "SpaceQueryPropNonId": {
        "type": "string",
        "enum": [
          "name",
          "description",
          "examples",
          "aliases",
          "tags",
          "known-as",
          "alias",
          "tag",
          "example"
        ],
        "description": "A property of a space that can be queried, excluding id."
      },
      "SpaceQueryPropWithScore": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "description",
          "examples",
          "aliases",
          "tags",
          "_id",
          "known-as",
          "alias",
          "tag",
          "example",
          "score",
          "_score"
        ],
        "description": "A property of a space that can be queried, including the score."
      },
      "SpaceQueryPropNonIdWithScore": {
        "type": "string",
        "enum": [
          "name",
          "description",
          "examples",
          "aliases",
          "tags",
          "known-as",
          "alias",
          "tag",
          "example",
          "score",
          "_score"
        ],
        "description": "A property of a space that can be queried, excluding id, including the score."
      },
      "ErrorCode": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "BAD_INPUT",
          "BAD_URL",
          "BAD_QUERY",
          "BAD_BODY",
          "INTERNAL",
          "NOT_FOUND",
          "NOT_IMPLEMENTED",
          "VALIDATION",
          "CONFLICT",
          "FORBIDDEN"
        ],
        "description": "An error code that may be returned by the server."
      },
      "ErrorMessage": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "null"
          }
        ],
        "description": "A message describing an error.",
        "example": "Internal server error."
      },
      "HelpLink": {
        "type": "string",
        "format": "uri",
        "description": "A URL to the docs page that may help the user resolve the error or understand the response.",
        "example": "https://example.com/docs"
      },
      "ErrorResponseBase": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "enum": [
              false
            ],
            "description": "Whether the operation was successful.",
            "example": false
          },
          "help": {
            "$ref": "#/components/schemas/HelpLink"
          }
        },
        "required": [
          "ok"
        ],
        "description": "An error response from the server."
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "enum": [
              false
            ],
            "description": "Whether the operation was successful.",
            "example": false
          },
          "help": {
            "$ref": "#/components/schemas/HelpLink"
          },
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorCode"
              },
              {
                "description": "The error code.",
                "example": "UNKNOWN"
              }
            ]
          },
          "message": {
            "$ref": "#/components/schemas/ErrorMessage"
          }
        },
        "required": [
          "ok",
          "code",
          "message"
        ]
      },
      "ErrorResponse501": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "enum": [
              false
            ],
            "description": "Whether the operation was successful.",
            "example": false
          },
          "help": {
            "$ref": "#/components/schemas/HelpLink"
          },
          "code": {
            "type": "string",
            "enum": [
              "NOT_IMPLEMENTED"
            ],
            "description": "The error code."
          },
          "message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorMessage"
              },
              {
                "example": "This feature is not yet implemented."
              }
            ]
          }
        },
        "required": [
          "ok",
          "code",
          "message"
        ]
      },
      "ErrorResponse400": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "enum": [
              false
            ],
            "description": "Whether the operation was successful.",
            "example": false
          },
          "help": {
            "$ref": "#/components/schemas/HelpLink"
          },
          "code": {
            "type": "string",
            "enum": [
              "BAD_INPUT",
              "BAD_BODY",
              "BAD_QUERY",
              "BAD_URL"
            ],
            "description": "The error code."
          },
          "message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorMessage"
              },
              {
                "example": "Invalid input."
              }
            ]
          }
        },
        "required": [
          "ok",
          "code",
          "message"
        ]
      },
      "ErrorResponse404": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "enum": [
              false
            ],
            "description": "Whether the operation was successful.",
            "example": false
          },
          "help": {
            "$ref": "#/components/schemas/HelpLink"
          },
          "code": {
            "type": "string",
            "enum": [
              "NOT_FOUND"
            ],
            "description": "The error code."
          },
          "message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorMessage"
              },
              {
                "example": "No resources found."
              }
            ]
          }
        },
        "required": [
          "ok",
          "code",
          "message"
        ]
      },
      "SuccessResponseBase": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "enum": [
              true
            ],
            "description": "Whether the operation was successful.",
            "example": true
          },
          "help": {
            "$ref": "#/components/schemas/HelpLink"
          }
        },
        "required": [
          "ok"
        ],
        "description": "A successful response from the server."
      },
      "SortOrder": {
        "type": "string",
        "enum": [
          "1",
          "asc",
          "ascending",
          "desc",
          "descending",
          "random",
          "rand",
          "-1"
        ],
        "description": "The order to sort by.",
        "example": "asc"
      },
      "GetSpaces200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "spaces": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CleanMongoSpace"
                },
                "description": "The spaces that match the query."
              }
            },
            "required": [
              "spaces"
            ],
            "description": "The response from getting spaces."
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ]
      },
      "GetSpacesResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/GetSpaces200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ]
      },
      "limit": {
        "type": "integer",
        "minimum": 1,
        "description": "[Query Parameter] The maximum number of resources to return. Must be a positive integer and non-zero. If not provided, the server will return all found resources.",
        "example": 10
      },
      "l": {
        "type": "integer",
        "minimum": 1,
        "description": "[Query Parameter] Shorthand for limit.",
        "example": 10
      },
      "offset": {
        "type": [
          "integer",
          "null"
        ],
        "minimum": 0,
        "default": 0,
        "description": "[Query Parameter] The number of spaces to skip before returning results. Must be a non-negative integer. If not provided, it will be considered 0."
      },
      "o": {
        "type": [
          "integer",
          "null"
        ],
        "minimum": 0,
        "default": 0,
        "description": "[Query Parameter] Shorthand for offset."
      },
      "sortBy": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "description",
          "examples",
          "aliases",
          "tags",
          "_id",
          "known-as",
          "alias",
          "tag",
          "example"
        ],
        "default": "id",
        "description": "[Query Parameter] The field to sort by. 'id' if not provided."
      },
      "sb": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "description",
          "examples",
          "aliases",
          "tags",
          "_id",
          "known-as",
          "alias",
          "tag",
          "example"
        ],
        "default": "id",
        "description": "[Query Parameter] Shorthand for sortBy."
      },
      "sortOrder": {
        "type": "string",
        "enum": [
          "1",
          "asc",
          "ascending",
          "desc",
          "descending",
          "random",
          "rand",
          "-1"
        ],
        "default": "asc",
        "description": "[Query Parameter] The order to sort the field by. Ascending if not provided.",
        "example": "asc"
      },
      "so": {
        "type": "string",
        "enum": [
          "1",
          "asc",
          "ascending",
          "desc",
          "descending",
          "random",
          "rand",
          "-1"
        ],
        "default": "asc",
        "description": "[Query Parameter] Shorthand for sortOrder.",
        "example": "asc"
      },
      "GetSpacesQueryParams": {
        "type": "object",
        "properties": {
          "limit": {
            "$ref": "#/components/schemas/limit"
          },
          "l": {
            "$ref": "#/components/schemas/l"
          },
          "offset": {
            "$ref": "#/components/schemas/offset"
          },
          "o": {
            "$ref": "#/components/schemas/o"
          },
          "sortBy": {
            "$ref": "#/components/schemas/sortBy"
          },
          "sb": {
            "$ref": "#/components/schemas/sb"
          },
          "sortOrder": {
            "$ref": "#/components/schemas/sortOrder"
          },
          "so": {
            "$ref": "#/components/schemas/so"
          }
        },
        "description": "Query parameters for getting all spaces."
      },
      "GetSpacesByPropURLParams": {
        "type": "object",
        "properties": {
          "prop": {
            "$ref": "#/components/schemas/SpaceQueryPropNonId"
          },
          "query": {
            "type": "string"
          }
        },
        "required": [
          "prop",
          "query"
        ],
        "description": "URL Parameters for getting spaces filtered by a property value."
      },
      "caseSensitive": {
        "type": "string",
        "enum": [
          "0",
          "1",
          "true",
          "false",
          "t",
          "f",
          "yes",
          "no",
          "y",
          "n",
          "on",
          "off"
        ],
        "default": "f",
        "description": "[Query Parameter] Whether to match the query case-sensitively. False if not provided."
      },
      "cs": {
        "type": "string",
        "enum": [
          "0",
          "1",
          "true",
          "false",
          "t",
          "f",
          "yes",
          "no",
          "y",
          "n",
          "on",
          "off"
        ],
        "default": "f",
        "description": "[Query Parameter] Shorthand for caseSensitive."
      },
      "accentSensitive": {
        "type": "string",
        "enum": [
          "0",
          "1",
          "true",
          "false",
          "t",
          "f",
          "yes",
          "no",
          "y",
          "n",
          "on",
          "off"
        ],
        "default": "f",
        "description": "[Query Parameter] Whether to match the query accent-sensitively. False if not provided."
      },
      "as": {
        "type": "string",
        "enum": [
          "0",
          "1",
          "true",
          "false",
          "t",
          "f",
          "yes",
          "no",
          "y",
          "n",
          "on",
          "off"
        ],
        "default": "f",
        "description": "[Query Parameter] Shorthand for accentSensitive."
      },
      "matchWhole": {
        "type": "string",
        "enum": [
          "0",
          "1",
          "true",
          "false",
          "t",
          "f",
          "yes",
          "no",
          "y",
          "n",
          "on",
          "off"
        ],
        "default": "f",
        "description": "[Query Parameter] Whether to match the query as the whole string. False if not provided."
      },
      "mw": {
        "type": "string",
        "enum": [
          "0",
          "1",
          "true",
          "false",
          "t",
          "f",
          "yes",
          "no",
          "y",
          "n",
          "on",
          "off"
        ],
        "default": "f",
        "description": "[Query Parameter] Shorthand for matchWhole."
      },
      "invert": {
        "type": "string",
        "enum": [
          "0",
          "1",
          "true",
          "false",
          "t",
          "f",
          "yes",
          "no",
          "y",
          "n",
          "on",
          "off"
        ],
        "default": "f",
        "description": "[Query Parameter] Whether to invert the match. False if not provided."
      },
      "i": {
        "type": "string",
        "enum": [
          "0",
          "1",
          "true",
          "false",
          "t",
          "f",
          "yes",
          "no",
          "y",
          "n",
          "on",
          "off"
        ],
        "default": "f",
        "description": "[Query Parameter] Shorthand for invert."
      },
      "GetSpacesByPropQueryParams": {
        "allOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetSpacesQueryParams"
              },
              {
                "properties": {
                  "limit": {
                    "$ref": "#/components/schemas/limit"
                  },
                  "l": {
                    "$ref": "#/components/schemas/l"
                  },
                  "offset": {
                    "$ref": "#/components/schemas/offset"
                  },
                  "o": {
                    "$ref": "#/components/schemas/o"
                  },
                  "sortBy": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/sortBy"
                      },
                      {
                        "default": "name"
                      }
                    ]
                  },
                  "sb": {
                    "$ref": "#/components/schemas/sb"
                  },
                  "sortOrder": {
                    "$ref": "#/components/schemas/sortOrder"
                  },
                  "so": {
                    "$ref": "#/components/schemas/so"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "caseSensitive": {
                "$ref": "#/components/schemas/caseSensitive"
              },
              "cs": {
                "$ref": "#/components/schemas/cs"
              },
              "accentSensitive": {
                "$ref": "#/components/schemas/accentSensitive"
              },
              "as": {
                "$ref": "#/components/schemas/as"
              },
              "matchWhole": {
                "$ref": "#/components/schemas/matchWhole"
              },
              "mw": {
                "$ref": "#/components/schemas/mw"
              },
              "invert": {
                "$ref": "#/components/schemas/invert"
              },
              "i": {
                "$ref": "#/components/schemas/i"
              }
            }
          }
        ],
        "description": "Query parameters for getting spaces filtered by a property value."
      },
      "GetSpacesByProp200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "spaces": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CleanMongoSpace"
                },
                "description": "The spaces that match the query."
              }
            },
            "required": [
              "spaces"
            ],
            "description": "The response from getting spaces."
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ]
      },
      "GetSpacesByPropResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/GetSpaces200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ]
      },
      "GetSpaceByExactID200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "space": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CleanMongoSpace"
                  },
                  {
                    "description": "The space that matches the query."
                  }
                ]
              }
            },
            "required": [
              "space"
            ],
            "description": "The response from getting spaces."
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ]
      },
      "GetSpacesByExactIDResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/GetSpaceByExactID200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ]
      },
      "GetSpaceByExactIDURLParams": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SpaceID"
              },
              {
                "description": "The ID of the space to get."
              }
            ]
          }
        },
        "required": [
          "id"
        ],
        "description": "The URL parameters for getting a space by ID."
      },
      "ScoreSpecification": {
        "type": "object",
        "properties": {
          "_score": {
            "type": "number",
            "description": "The relevance score of the space."
          }
        },
        "required": [
          "_score"
        ],
        "description": "A specification for a relevance score."
      },
      "SpaceWithScore": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Space"
          },
          {
            "$ref": "#/components/schemas/ScoreSpecification"
          }
        ],
        "description": "A space with an associated relevance score."
      },
      "CleanSpaceWithScore": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CleanSpace"
          },
          {
            "$ref": "#/components/schemas/ScoreSpecification"
          }
        ],
        "description": "CleanSpaceWithScore, but with some fields optional and provided sensible defaults."
      },
      "MongoSpaceWithScore": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MongoSpace"
          },
          {
            "$ref": "#/components/schemas/ScoreSpecification"
          }
        ],
        "description": "The MongoDB representation of a space with an associated relevance score."
      },
      "CleanMongoSpaceWithScore": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CleanMongoSpace"
          },
          {
            "$ref": "#/components/schemas/ScoreSpecification"
          }
        ],
        "description": "CleanMongoSpaceWithScore, but with some fields optional and provided sensible defaults."
      },
      "SearchSpacesURLParams": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The search query."
          }
        },
        "required": [
          "query"
        ],
        "description": "The URL parameters for searching spaces."
      },
      "SearchSpaces200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "spaces": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CleanMongoSpaceWithScore"
                },
                "description": "The spaces that match the query."
              }
            },
            "required": [
              "spaces"
            ],
            "description": "The response from searching spaces."
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ]
      },
      "SearchSpacesResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/SearchSpaces200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ]
      },
      "sortByWithScore": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "description",
          "examples",
          "aliases",
          "tags",
          "_id",
          "known-as",
          "alias",
          "tag",
          "example",
          "score",
          "_score"
        ],
        "default": "score",
        "description": "[Query Parameter] The field to sort by. 'id' if not provided."
      },
      "sbWithScore": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "description",
          "examples",
          "aliases",
          "tags",
          "_id",
          "known-as",
          "alias",
          "tag",
          "example",
          "score",
          "_score"
        ],
        "default": "score",
        "description": "[Query Parameter] Shorthand for sortBy."
      },
      "sortOrderDescDefault": {
        "type": "string",
        "enum": [
          "1",
          "asc",
          "ascending",
          "desc",
          "descending",
          "random",
          "rand",
          "-1"
        ],
        "default": "desc",
        "description": "[Query Parameter] The order to sort the field by. Descending by default.",
        "example": "asc"
      },
      "soDescDefault": {
        "type": "string",
        "enum": [
          "1",
          "asc",
          "ascending",
          "desc",
          "descending",
          "random",
          "rand",
          "-1"
        ],
        "default": "desc",
        "description": "[Query Parameter] Shorthand for sortOrder.",
        "example": "asc"
      },
      "SearchSpacesQueryParams": {
        "type": "object",
        "properties": {
          "limit": {
            "$ref": "#/components/schemas/limit"
          },
          "l": {
            "$ref": "#/components/schemas/l"
          },
          "offset": {
            "$ref": "#/components/schemas/offset"
          },
          "o": {
            "$ref": "#/components/schemas/o"
          },
          "sortBy": {
            "$ref": "#/components/schemas/sortByWithScore"
          },
          "sb": {
            "$ref": "#/components/schemas/sbWithScore"
          },
          "sortOrder": {
            "$ref": "#/components/schemas/sortOrderDescDefault"
          },
          "so": {
            "$ref": "#/components/schemas/soDescDefault"
          }
        },
        "description": "Query parameters for searching spaces."
      },
      "CountSpaces200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "count": {
                "type": "number",
                "minimum": 0,
                "description": "The number of spaces that match the query."
              }
            },
            "required": [
              "count"
            ]
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ],
        "description": "The response from counting spaces."
      },
      "CountSpacesResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/CountSpaces200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ]
      },
      "SearchSpacesCountURLParams": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The search query."
          }
        },
        "required": [
          "query"
        ],
        "description": "The URL parameters for searching spaces."
      },
      "SearchSpacesCount200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "count": {
                "type": "number",
                "minimum": 0,
                "description": "The number of spaces that match the query."
              }
            },
            "required": [
              "count"
            ]
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ],
        "description": "The response from counting spaces."
      },
      "SearchSpacesCountResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/SearchSpacesCount200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ]
      },
      "SearchSpacesListPropURLParams": {
        "type": "object",
        "properties": {
          "prop": {
            "$ref": "#/components/schemas/SpaceQueryProp"
          },
          "query": {
            "type": "string",
            "description": "The query to search for."
          }
        },
        "required": [
          "prop",
          "query"
        ],
        "description": "URL Parameters for listing all values of a property."
      },
      "SearchSpacesListProp200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "null"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "description": "The value of the property."
                    },
                    "_score": {
                      "type": "number",
                      "description": "The relevance score of the value."
                    }
                  },
                  "required": [
                    "value",
                    "_score"
                  ]
                },
                "description": "The values found and their relevance scores."
              }
            },
            "required": [
              "values"
            ],
            "description": "List of values found"
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ]
      },
      "SearchSpacesListPropResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/SearchSpacesListProp200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ]
      },
      "sortBySearchListProp": {
        "type": "string",
        "enum": [
          "_score",
          "score",
          "value"
        ],
        "default": "score",
        "description": "The field to sort by."
      },
      "sbSearchListProp": {
        "type": "string",
        "enum": [
          "_score",
          "score",
          "value"
        ],
        "default": "_score",
        "description": "[Query Parameter] Shorthand for searchListPropSortBy."
      },
      "SearchSpacesListPropQueryParams": {
        "type": "object",
        "properties": {
          "limit": {
            "$ref": "#/components/schemas/limit"
          },
          "l": {
            "$ref": "#/components/schemas/l"
          },
          "offset": {
            "$ref": "#/components/schemas/offset"
          },
          "o": {
            "$ref": "#/components/schemas/o"
          },
          "sortOrder": {
            "$ref": "#/components/schemas/sortOrderDescDefault"
          },
          "so": {
            "$ref": "#/components/schemas/soDescDefault"
          },
          "sortBy": {
            "$ref": "#/components/schemas/sortBySearchListProp"
          },
          "sb": {
            "$ref": "#/components/schemas/sbSearchListProp"
          }
        },
        "description": "Query parameters for searching spaces."
      },
      "CountSpacesByProp200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "count": {
                "type": "number",
                "minimum": 0,
                "description": "The number of spaces that match the query."
              }
            },
            "required": [
              "count"
            ]
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ],
        "description": "The response from counting spaces."
      },
      "CountSpacesByPropResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/CountSpaces200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ]
      },
      "CountSpacesByPropURLParams": {
        "type": "object",
        "properties": {
          "prop": {
            "$ref": "#/components/schemas/SpaceQueryPropNonId"
          },
          "query": {
            "type": "string"
          }
        },
        "required": [
          "prop",
          "query"
        ],
        "description": "URL Parameters for getting spaces filtered by a property value."
      },
      "CountSpacesByPropQueryParams": {
        "type": "object",
        "properties": {
          "caseSensitive": {
            "$ref": "#/components/schemas/caseSensitive"
          },
          "cs": {
            "$ref": "#/components/schemas/cs"
          },
          "accentSensitive": {
            "$ref": "#/components/schemas/accentSensitive"
          },
          "as": {
            "$ref": "#/components/schemas/as"
          },
          "matchWhole": {
            "$ref": "#/components/schemas/matchWhole"
          },
          "mw": {
            "$ref": "#/components/schemas/mw"
          },
          "invert": {
            "$ref": "#/components/schemas/invert"
          },
          "i": {
            "$ref": "#/components/schemas/i"
          }
        }
      },
      "ListSpacePropURLParams": {
        "type": "object",
        "properties": {
          "prop": {
            "$ref": "#/components/schemas/SpaceQueryProp"
          }
        },
        "required": [
          "prop"
        ],
        "description": "URL Parameters for listing all values of a property."
      },
      "ListSpacePropQueryParams": {
        "type": "object",
        "properties": {
          "limit": {
            "$ref": "#/components/schemas/limit"
          },
          "l": {
            "$ref": "#/components/schemas/l"
          },
          "offset": {
            "$ref": "#/components/schemas/offset"
          },
          "o": {
            "$ref": "#/components/schemas/o"
          },
          "sortOrder": {
            "$ref": "#/components/schemas/sortOrder"
          },
          "so": {
            "$ref": "#/components/schemas/so"
          }
        },
        "description": "Query parameters for listing all values under a property."
      },
      "ListSpaceProp200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "description": "The values of the property."
              }
            },
            "required": [
              "values"
            ],
            "description": "List of values found"
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ]
      },
      "ListSpacePropResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ListSpaceProp200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ]
      },
      "ListSpacePropByPropURLParams": {
        "type": "object",
        "properties": {
          "listProp": {
            "$ref": "#/components/schemas/SpaceQueryProp"
          },
          "query": {
            "type": "string"
          },
          "queryProp": {
            "$ref": "#/components/schemas/SpaceQueryProp"
          }
        },
        "required": [
          "listProp",
          "query",
          "queryProp"
        ],
        "description": "URL Parameters for listing all values of a property for a subset of spaces."
      },
      "ListSpacePropByProp200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "description": "The values of the property."
              }
            },
            "required": [
              "values"
            ],
            "description": "List of values found"
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ]
      },
      "ListSpacePropByPropResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ListSpaceProp200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ]
      },
      "NewSpaceRequestBody": {
        "type": "object",
        "properties": {
          "space": {
            "type": "object",
            "properties": {
              "name": {
                "$ref": "#/components/schemas/SpaceName"
              },
              "description": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpaceDescription"
                  },
                  {
                    "default": null
                  }
                ]
              },
              "examples": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SpaceExample"
                },
                "default": []
              },
              "aliases": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SpaceName"
                },
                "default": [],
                "description": "Aliases for the space.",
                "example": [
                  "Alias 1",
                  "Alias 2"
                ]
              },
              "tags": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SpaceTag"
                },
                "default": []
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "required": [
          "space"
        ],
        "description": "The request body for creating a new space"
      },
      "NewSpace200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "space": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CleanMongoSpace"
                  },
                  {
                    "description": "The newly created space."
                  }
                ]
              }
            },
            "required": [
              "space"
            ]
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ],
        "description": "The response from creating a new space."
      },
      "NewSpaceResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/NewSpace200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ]
      },
      "UpdateSpaceByIDURLParams": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SpaceID"
          }
        },
        "required": [
          "id"
        ],
        "description": "The URL parameters for updating a space."
      },
      "UpdateSpaceByIDRequestBody": {
        "type": "object",
        "properties": {
          "difference": {
            "type": "object",
            "properties": {
              "$set": {
                "type": "object",
                "additionalProperties": {},
                "description": "The fields to set. Each key is a path to a field.",
                "example": {
                  "name": "New Name",
                  "tags": [
                    "new-tag"
                  ]
                }
              },
              "$unset": {
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "enum": [
                    ""
                  ]
                },
                "description": "The fields to unset. Each key is a path to a field. Cannot be a direct path, must be nested from a list field.",
                "example": {
                  "aliases.0": ""
                }
              },
              "$push": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "$each": {
                      "type": "array",
                      "items": {}
                    }
                  },
                  "required": [
                    "$each"
                  ]
                },
                "description": "The values to push to a list field. Each key is a path to a field. Must be a direct path to a list field.",
                "example": {
                  "tags": {
                    "$each": [
                      "new-tag"
                    ]
                  }
                }
              },
              "$pullAll": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "$in": {
                      "type": "array",
                      "items": {}
                    }
                  },
                  "required": [
                    "$in"
                  ]
                },
                "description": "The values to pull from a list field. Each key is a path to a field. Must be a direct path to a list field.",
                "example": {
                  "tags": {
                    "$in": [
                      "old-tag"
                    ]
                  }
                }
              }
            }
          }
        },
        "required": [
          "difference"
        ],
        "description": "The request body for updating a space"
      },
      "UpdateSpaceByID200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "space": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CleanMongoSpace"
                  },
                  {
                    "description": "The updated space."
                  }
                ]
              }
            },
            "required": [
              "space"
            ]
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ],
        "description": "The response from updating a space."
      },
      "UpdateSpaceByIDResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/UpdateSpaceByID200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ],
        "description": "The response from updating a space by ID."
      },
      "UpdateSpaceByNameURLParams": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "description": "The URL parameters for updating a space."
      },
      "UpdateSpaceByNameRequestBody": {
        "type": "object",
        "properties": {
          "difference": {
            "type": "object",
            "properties": {
              "$set": {
                "type": "object",
                "additionalProperties": {},
                "description": "The fields to set. Each key is a path to a field.",
                "example": {
                  "name": "New Name",
                  "tags": [
                    "new-tag"
                  ]
                }
              },
              "$unset": {
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "enum": [
                    ""
                  ]
                },
                "description": "The fields to unset. Each key is a path to a field. Cannot be a direct path, must be nested from a list field.",
                "example": {
                  "aliases.0": ""
                }
              },
              "$push": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "$each": {
                      "type": "array",
                      "items": {}
                    }
                  },
                  "required": [
                    "$each"
                  ]
                },
                "description": "The values to push to a list field. Each key is a path to a field. Must be a direct path to a list field.",
                "example": {
                  "tags": {
                    "$each": [
                      "new-tag"
                    ]
                  }
                }
              },
              "$pullAll": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "$in": {
                      "type": "array",
                      "items": {}
                    }
                  },
                  "required": [
                    "$in"
                  ]
                },
                "description": "The values to pull from a list field. Each key is a path to a field. Must be a direct path to a list field.",
                "example": {
                  "tags": {
                    "$in": [
                      "old-tag"
                    ]
                  }
                }
              }
            }
          }
        },
        "required": [
          "difference"
        ],
        "description": "The request body for updating a space"
      },
      "UpdateSpaceByName200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "space": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CleanMongoSpace"
                  },
                  {
                    "description": "The updated space."
                  }
                ]
              }
            },
            "required": [
              "space"
            ]
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ],
        "description": "The response from updating a space."
      },
      "UpdateSpaceByNameResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/UpdateSpaceByID200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ],
        "description": "The response for updating a space by name."
      },
      "DeleteSpaceByIDURLParams": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SpaceID"
              },
              {
                "description": "The ID of the space to delete."
              }
            ]
          }
        },
        "required": [
          "id"
        ],
        "description": "URL Parameters for deleting a space by ID."
      },
      "DeleteSpaceByID200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "deleted": {
                "type": "boolean",
                "enum": [
                  true
                ],
                "description": "Whether the space was successfully deleted."
              }
            },
            "required": [
              "deleted"
            ],
            "description": "The response from deleting a space."
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ]
      },
      "DeleteSpaceByIDResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/DeleteSpaceByID200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ]
      },
      "DeleteSpaceByNameURLParams": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the space to delete."
          }
        },
        "required": [
          "name"
        ],
        "description": "URL Parameters for deleting a space by name."
      },
      "DeleteSpaceByName200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "deleted": {
                "type": "boolean",
                "enum": [
                  true
                ],
                "description": "Whether the space was successfully deleted."
              }
            },
            "required": [
              "deleted"
            ],
            "description": "The response from deleting a space."
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ]
      },
      "DeleteSpaceByNameResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/DeleteSpaceByName200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ]
      },
      "DuplicateSpaceByIDURLParams": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SpaceID"
          }
        },
        "required": [
          "id"
        ],
        "description": "The URL parameters for duplicating a space."
      },
      "DuplicateSpaceByID200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "space": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CleanMongoSpace"
                  },
                  {
                    "description": "The duplicated space."
                  }
                ]
              }
            },
            "required": [
              "space"
            ],
            "description": "The response from duplicating a space."
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ]
      },
      "DuplicateSpaceByIDResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/DuplicateSpaceByID200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ]
      },
      "DuplicateSpaceByNameURLParams": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "description": "The URL parameters for duplicating a space."
      },
      "DuplicateSpaceByName200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "space": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CleanMongoSpace"
                  },
                  {
                    "description": "The duplicated space."
                  }
                ]
              }
            },
            "required": [
              "space"
            ],
            "description": "The response from duplicating a space."
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ]
      },
      "DuplicateSpaceByNameResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/DuplicateSpaceByName200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ]
      }
    }
  }
}